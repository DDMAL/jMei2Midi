DONE
====
- jMei2Midi:
	- Improve jMei2Midi README
		- Introduction, what is stat tracker?, mention assumptions txt file
	- Assumptions text file: add list of all recognized instruments and tempos, and what happens if they're missing
	- Clean up / expand comments everywhere
		- Private ones too
		- Follow Javadocs standards and regenerate Javadocs as last step for checking nothing was missed
- jSymbolic:
	- Eliminate option of saving both overall features and windowed features, only allow one or the other
		- Replace with radio buttons in GUI
	- Update jSymbolic README and installation folders
		- Add sample MEI files (good quality ones)
	- Clean up / expand comments everywhere
		- Private ones too
		- Follow Javadocs standards and regenerate Javadocs as last step
	- Last window has just 0 and NaN values (even duration window), so let's stop saving it (unless the piece is shorter than one window, in which case we should save it)
		- Indicate in README that last window is dropped
		
In Progress
===========
	- Problem saving Weka ARFF and CSV when windowed (works when full songs, though)
		- I will need to look into ACE if the problem is an ACE XML parsing one rather than an ACE XML saving one
	- Return to jSymbolic from jMEI2MIDI a NonMidiInformation object that contains information about grace notes (MIDI tick, channel, and pitch of each grace note)
		- Other non-grace note information can be added to this same object later (e.g. chord labels, diatonic intervals would be useful, etc.)
		- Code for actually using this object in jSymbolic can be added later
		
What was done summer 2015
=========================
jMei2Midi 1.0 was completed where it can handle all of the sample files given in the music-encoding complete examples
package. This MEI test set can be found at https://github.com/music-encoding/music-encoding. It can also handle
most of the mei-test-set found at https://github.com/DDMAL/mei-test-set. Any sample files added after the completion
of jMei2Midi may not work, depending on the types of MEI elements and attributes used. 

MEI file format is seemingly very subject to being updated and modified. So jMei2Midi was built in such a way
to make it easy to add any new elements to it for midi conversion. The details can be found in the development
section of the README on github. Also, a new pipeline has been started to transfer
the non-midi MEI data to jSymbolic but this is in the very early stages of development and should be updated.
This can be found in the development branch of jMei2Midi.

jSymbolic and UtilityClasses were updated to account for MEI. This is done through using jMei2Midi as a dependency
on so a java MIDI sequence can be fetched through jMei2Midi. Therefore any jSymoblic can now obtain all of the
features that it computed using MIDI but now with MEI files. As discussed above, the pipeline for non-midi MEI
specific data is under development but easily implementable.

UtilityClasses updated files consist of MIDIMethods.java and StringMethods.java. MIDIMethods.java was updated to
account for windowed sequences when obtaining the MIDI features. It is currently fully functional and returns
the appropriate sequences given a window length and a window overlap offset.

jSymoblic was very generally updated as well for both MEI and MIDI sequence windows. Also, CSV and ARFF conversions
were added and both these file formats are simply converted from ACE XML. Currently, the CSV and ARFF do not
convert properly when given only sequence windowing but this seems to be an ACE processing issue. An error log was
also added to allow batch processing to not stop with an error in a file. The error log catches the errors and then
only prints them out appropriately after all the good files are fully processed. All appropriate messages and errors
have been accounted for and will be printed to the command line or GUI depending on the user. Some bugs and tweaks 
were also made generally to jSymbolic and these all contributed to the above updates.